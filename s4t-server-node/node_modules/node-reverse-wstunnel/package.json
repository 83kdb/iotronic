{
  "name": "node-reverse-wstunnel",
  "version": "0.1.1",
  "description": "Tools to establish a TCP socket tunnel over websocket connection, and to enstabilish a reverse tunnel over websocket connection, for circumventing the problems of direct connections to the host behind a strict firewalls or without a public IP.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "websocket": ">=1.0.17",
    "optimist": ">=0.6.1",
    "under_score": ">=0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/MDSLab/wstunnel.git"
  },
  "keywords": [
    "tunnel",
    "reverse",
    "WebSocket"
  ],
  "author": {
    "name": "Andrea Rocco Lotronto",
    "email": "alotronto@unime.it"
  },
  "license": [
    {
      "type": "MIT",
      "url": "https://github.com/MDSLab/wstunnel/blob/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/MDSLab/wstunnel/issues"
  },
  "homepage": "https://github.com/MDSLab/wstunnel",
  "readme": "#wstunnel\n\n\nTools to establish a TCP socket tunnel over websocket connection, and to enstabilish a reverse tunnel over websocket connection, for circumventing the problems of direct connections to the host behind a strict firewalls or without a public IP.\n\n##Usage in Node\n###Installation\nnpm install node-reverse-wstunnel\n\n###Server example\n```JavaScript   \nvar wts = require(\"node-reverse-wstunnel\");\n\nserver = new wts.server(); \n//the port of the websocket server \nserver.start(port);\n``` \n###Client example\n```JavaScript   \nvar wts = require(\"node-reverse-wstunnel\");\n\nclient = new wts.client();\n//localport is the opened port of the localhost for the tunnel\n//remotehost:port is the service that will be tunneled\nclient.start(localport,'ws://websocketserverhost:port', remotehost:port);\n```\n\n###Reverse Server example\n```JavaScript   \nvar wts = require(\"node-reverse-wstunnel\");\n\nreverse_server = new wts.server_reverse(); \n//the port of the websocket server \nreverse_server.start(port);\n``` \n###Reverse Client example\n```JavaScript   \nvar wts = require(\"node-reverse-wstunnel\");\n\nreverse_client = new wts.client_reverse();\n//portTunnel is the port that will be opened on the websocket server \n//remotehost:port is the service that will be reverse tunneled\nreverse_client.start(portTunnel, 'ws://websocketserverhost:port', remotehost:port);\n```\n\n##Using wstt.js executable\nUsing the *wstt.js* executable located in *bin* directory:\n\nFor running a websocket tunnel server:  \n\n    ./wstt.js -s 8080\n\n\nFor running a websocket tunnel client: \n\n    ./wstt.js -tunnel 33:2.2.2.2:33 ws://host:8080\n\nIn the above example, client picks the final tunnel destination, similar to ssh tunnel.  Alternatively for security reason, you can lock tunnel destination on the server end, example:\n\n**Server:**\n        \n        ./wstt.js -s 8080 -t 2.2.2.2:33\n\n**Client:**\n        \n        ./wstt.js -t 33 ws://server:8080\n\nIn both examples, connection to localhost:33 on client will be tunneled to 2.2.2.2:33 on server via websocket connection in between.\n\nFor running a websocket reverse tunnel server:\n\n    ./wstt.js -r -s 8080\n\nFor running a websocket reverse tunnel client:\n\n    ./wstt.js -r 6666:2.2.2.2:33 ws://server:8080\n\nIn the above example the client tells the server to open a TCP server on port 6666 and all connection on this port are tunneled to the client that is directely connected to 2.2.2.2:33\n\n## Use case\n\nFor tunneling over strict firewalls: WebSocket is a part of the HTML5 standard, any reasonable firewall will unlikely\nbe so strict as to break HTML5. \n\nThe tunnel server currently supports plain tcp socket only, for SSL support, use NGINX, shown below:\n\nOn server:\n    ./wstt.js -s 8080\n\nOn server, run nginx (>=1.3.13) with sample configuration:\n\n    server {\n        listen   443;\n        server_name  mydomain.com;\n\n        ssl  on;\n        ssl_certificate  /path/to/my.crt\n        ssl_certificate_key  /path/to/my.key\n        ssl_session_timeout  5m;\n        ssl_protocols  SSLv2 SSLv3 TLSv1;\n        ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n        ssl_prefer_server_ciphers   on;\n\n        location / {\n            proxy_pass http://127.0.0.1:8080;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_set_header        Host            $host;\n            proxy_set_header        X-Real-IP       $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header        X-Forwarded-Proto $scheme;\n        }\n    }\n\nThen on client:\n\n    ./wstt.js -t 99:targethost:targetport wss://mydomain.com\n\n\n### OpenVPN use case\n\nSuppose on the server you have OpenVpn installed on the default port 1194,  then run wstunnel as such:\n\n    ./wstt.js -s 8888 -t 127.0.0.1:1194\n    \nNow on the server, you have a websocket server listening on 8888, any connection to 8888 will be forwarded to  \n127.0.0.1:1194, the OpenVpn port.\n\nNow on client, you run:\n\n    ./wstt.js -t 1194 ws://server:8888\n  \nThen launch the OpenVpn client, connect to localhost:1194 will be same as connect to server's 1194 port.\n\nSuppose the firewall allows http traffic on target port 80 only, then setup a NGINX reverse proxy to listen on port 80,\nand proxy http traffic to localhost:8888 via host name.\n\n",
  "readmeFilename": "readme.md",
  "gitHead": "d80e42ebed36889935083a453074ee274a12e9d6",
  "_id": "node-reverse-wstunnel@0.1.1",
  "_shasum": "0dbd7385fde9528191f93846b834718c0714aefd",
  "_from": "node-reverse-wstunnel@*"
}
